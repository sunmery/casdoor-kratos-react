// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.25.2
// source: casdoor/v1/casdoor.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCasdoorSignin = "/casdoor.v1.Casdoor/Signin"
const OperationCasdoorUserinfo = "/casdoor.v1.Casdoor/Userinfo"

type CasdoorHTTPServer interface {
	Signin(context.Context, *SigninRequest) (*SigninReply, error)
	Userinfo(context.Context, *UserinfoRequest) (*UserinfoReply, error)
}

func RegisterCasdoorHTTPServer(s *http.Server, srv CasdoorHTTPServer) {
	r := s.Route("/")
	r.POST("/api/signin", _Casdoor_Signin0_HTTP_Handler(srv))
	r.GET("/api/userinfo", _Casdoor_Userinfo0_HTTP_Handler(srv))
}

func _Casdoor_Signin0_HTTP_Handler(srv CasdoorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SigninRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCasdoorSignin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Signin(ctx, req.(*SigninRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SigninReply)
		return ctx.Result(200, reply)
	}
}

func _Casdoor_Userinfo0_HTTP_Handler(srv CasdoorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserinfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCasdoorUserinfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Userinfo(ctx, req.(*UserinfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserinfoReply)
		return ctx.Result(200, reply)
	}
}

type CasdoorHTTPClient interface {
	Signin(ctx context.Context, req *SigninRequest, opts ...http.CallOption) (rsp *SigninReply, err error)
	Userinfo(ctx context.Context, req *UserinfoRequest, opts ...http.CallOption) (rsp *UserinfoReply, err error)
}

type CasdoorHTTPClientImpl struct {
	cc *http.Client
}

func NewCasdoorHTTPClient(client *http.Client) CasdoorHTTPClient {
	return &CasdoorHTTPClientImpl{client}
}

func (c *CasdoorHTTPClientImpl) Signin(ctx context.Context, in *SigninRequest, opts ...http.CallOption) (*SigninReply, error) {
	var out SigninReply
	pattern := "/api/signin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCasdoorSignin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CasdoorHTTPClientImpl) Userinfo(ctx context.Context, in *UserinfoRequest, opts ...http.CallOption) (*UserinfoReply, error) {
	var out UserinfoReply
	pattern := "/api/userinfo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCasdoorUserinfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
