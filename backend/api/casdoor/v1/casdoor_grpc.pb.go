// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: casdoor/v1/casdoor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Casdoor_Signin_FullMethodName   = "/casdoor.v1.Casdoor/Signin"
	Casdoor_Userinfo_FullMethodName = "/casdoor.v1.Casdoor/Userinfo"
)

// CasdoorClient is the client API for Casdoor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasdoorClient interface {
	Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninReply, error)
	Userinfo(ctx context.Context, in *UserinfoRequest, opts ...grpc.CallOption) (*UserinfoReply, error)
}

type casdoorClient struct {
	cc grpc.ClientConnInterface
}

func NewCasdoorClient(cc grpc.ClientConnInterface) CasdoorClient {
	return &casdoorClient{cc}
}

func (c *casdoorClient) Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigninReply)
	err := c.cc.Invoke(ctx, Casdoor_Signin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casdoorClient) Userinfo(ctx context.Context, in *UserinfoRequest, opts ...grpc.CallOption) (*UserinfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserinfoReply)
	err := c.cc.Invoke(ctx, Casdoor_Userinfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasdoorServer is the server API for Casdoor service.
// All implementations must embed UnimplementedCasdoorServer
// for forward compatibility.
type CasdoorServer interface {
	Signin(context.Context, *SigninRequest) (*SigninReply, error)
	Userinfo(context.Context, *UserinfoRequest) (*UserinfoReply, error)
	mustEmbedUnimplementedCasdoorServer()
}

// UnimplementedCasdoorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCasdoorServer struct{}

func (UnimplementedCasdoorServer) Signin(context.Context, *SigninRequest) (*SigninReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signin not implemented")
}
func (UnimplementedCasdoorServer) Userinfo(context.Context, *UserinfoRequest) (*UserinfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Userinfo not implemented")
}
func (UnimplementedCasdoorServer) mustEmbedUnimplementedCasdoorServer() {}
func (UnimplementedCasdoorServer) testEmbeddedByValue()                 {}

// UnsafeCasdoorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasdoorServer will
// result in compilation errors.
type UnsafeCasdoorServer interface {
	mustEmbedUnimplementedCasdoorServer()
}

func RegisterCasdoorServer(s grpc.ServiceRegistrar, srv CasdoorServer) {
	// If the following call pancis, it indicates UnimplementedCasdoorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Casdoor_ServiceDesc, srv)
}

func _Casdoor_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasdoorServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casdoor_Signin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasdoorServer).Signin(ctx, req.(*SigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casdoor_Userinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasdoorServer).Userinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casdoor_Userinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasdoorServer).Userinfo(ctx, req.(*UserinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Casdoor_ServiceDesc is the grpc.ServiceDesc for Casdoor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Casdoor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casdoor.v1.Casdoor",
	HandlerType: (*CasdoorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signin",
			Handler:    _Casdoor_Signin_Handler,
		},
		{
			MethodName: "Userinfo",
			Handler:    _Casdoor_Userinfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casdoor/v1/casdoor.proto",
}
